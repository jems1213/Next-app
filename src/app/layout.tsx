import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import UnhandledRejectionGuard from "../components/UnhandledRejectionGuard";
import { CartProvider } from "../context/cart";
import { AuthProvider } from "../context/auth";
import AnnouncementBar from "../components/AnnouncementBar";
import ToastRoot from "../components/Toast";

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <CartProvider>

          {/* Safe inline fetch wrapper to reduce noisy third-party fetch failures (runs before client JS mounts) */}
          <script dangerouslySetInnerHTML={{__html: `(function(){try{if(typeof window==='undefined' || !window.fetch) return; var orig = window.fetch; if(orig && !orig.__fetchGuardWrapped){ var w = function(i,u){ try{ var p = orig(i,u); if(p && p.catch) return p.catch(function(){ return new Response(null,{status:503,statusText:'Service Unavailable'}); }); return Promise.resolve(p); }catch(e){ try{ return Promise.resolve(new Response(null,{status:503,statusText:'Service Unavailable'})); }catch(e2){ return Promise.resolve(new Response(null,{status:503,statusText:'Service Unavailable'})); } } }; try{ w.__fetchGuardWrapped = true; }catch(e){} try{ window.fetch = w; }catch(e){} } }catch(e){} })();`}} />
          <AnnouncementBar />
          <AuthProvider>
            <Navbar />
            <UnhandledRejectionGuard />
            <main>{children}</main>

            <Footer />
          </AuthProvider>
        </CartProvider>
      </body>
    </html>
  );
}
